$date
   Tue Jan 21 23:15:46 2025
$end
$version
  2020.2
$end
$timescale
  1ps
$end
$scope module RISC_V_Processor_Top_Tb $end
$var reg 1 ! clk $end
$var reg 1 " resetn $end
$scope module RISC_V_Processor_Top $end
$var wire 1 # clk $end
$var wire 1 $ resetn $end
$var wire 1 % select_output $end
$var reg 7 & hex0 [6:0] $end
$var reg 7 ' hex1 [6:0] $end
$var reg 7 ( hex2 [6:0] $end
$var reg 7 ) hex3 [6:0] $end
$var reg 7 * hex4 [6:0] $end
$var reg 7 + hex5 [6:0] $end
$var reg 7 , hex6 [6:0] $end
$var reg 7 - hex7 [6:0] $end
$var wire 32 . output_value [31:0] $end
$var wire 32 / pc_next [31:0] $end
$var wire 32 0 pc_current [31:0] $end
$var wire 32 1 pc_plus_four [31:0] $end
$var wire 32 2 instruction [31:0] $end
$var wire 32 3 PC_current_plus_four [31:0] $end
$var wire 32 4 rs1_data [31:0] $end
$var wire 32 5 rs2_data [31:0] $end
$var wire 32 6 rd_data [31:0] $end
$var wire 5 7 rs1_address [4:0] $end
$var wire 5 8 rs2_address [4:0] $end
$var wire 5 9 rd_address [4:0] $end
$var wire 1 : reg_write $end
$var wire 32 ; alu_input_1 [31:0] $end
$var wire 32 < alu_input_2 [31:0] $end
$var wire 32 = alu_output [31:0] $end
$var wire 3 > alu_operation [2:0] $end
$var wire 32 ? alu_result [31:0] $end
$var wire 32 @ rs2_data_or_immediate [31:0] $end
$var wire 1 A limit_immediate $end
$var wire 32 B limited_immediate [31:0] $end
$var wire 32 C immediate [31:0] $end
$var wire 1 D reg_or_immediate $end
$var wire 32 E data_mem_read_data_corrected [31:0] $end
$var wire 32 F data_mem_read_data [31:0] $end
$var wire 32 G data_mem_read_address [31:0] $end
$var wire 1 H data_mem_write $end
$var wire 1 I branch_possibility $end
$var wire 1 J branch_or_not $end
$var wire 2 K alu_or_load_or_pc_plus_four_control [1:0] $end
$var wire 32 L rs1_data_or_pc_or_zero [31:0] $end
$var wire 2 M rs1_data_or_pc_or_zero_control [1:0] $end
$scope module PC $end
$var wire 32 / inst_addr_in [31:0] $end
$var reg 32 N inst_addr_out [31:0] $end
$var wire 1 # clk $end
$var wire 1 $ resetn $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 0 adddress [31:0] $end
$var reg 32 O instruction [31:0] $end
$var wire 1 # clk $end
$var wire 1 $ resetn $end
$upscope $end
$scope module PC_Adder $end
$var wire 32 0 a [31:0] $end
$var wire 32 P b [31:0] $end
$var reg 32 Q result [31:0] $end
$var wire 1 $ resetn $end
$upscope $end
$scope module Register_File $end
$var wire 5 7 rs1 [4:0] $end
$var wire 5 8 rs2 [4:0] $end
$var wire 5 9 rd [4:0] $end
$var reg 32 R rs1_data [31:0] $end
$var reg 32 S rs2_data [31:0] $end
$var wire 32 6 write_data [31:0] $end
$var wire 1 : write_enable $end
$var wire 1 # clk $end
$var wire 1 $ resetn $end
$scope begin Block48_6 $end
$var integer 32 T i $end
$upscope $end
$upscope $end
$scope module ALU_32bit $end
$var wire 32 L a [31:0] $end
$var wire 32 @ b [31:0] $end
$var reg 32 U result [31:0] $end
$var wire 1 $ resetn $end
$var wire 3 > control [2:0] $end
$upscope $end
$scope module Control_Unit $end
$var wire 32 2 instruction [31:0] $end
$var reg 1 V reg_write $end
$var reg 3 W alu_op [2:0] $end
$var reg 5 X rs1 [4:0] $end
$var reg 5 Y rs2 [4:0] $end
$var reg 5 Z rd [4:0] $end
$var reg 32 [ immediate [31:0] $end
$var reg 1 \ limit_immediate $end
$var reg 1 ] data_mem_write $end
$var reg 1 ^ reg_or_immediate $end
$var reg 1 _ branch_possibility $end
$var reg 2 ` rs1_data_or_pc_or_zero [1:0] $end
$var reg 2 a alu_or_load_or_pc_plus_four [1:0] $end
$var wire 1 $ resetn $end
$var reg 3 b func3 [2:0] $end
$var reg 7 c func7 [6:0] $end
$var reg 7 d opcode [6:0] $end
$scope module Instruction_Parser $end
$var wire 32 2 instruction [31:0] $end
$var wire 5 e rs1 [4:0] $end
$var wire 5 f rs2 [4:0] $end
$var wire 5 g rd [4:0] $end
$var wire 3 h func3 [2:0] $end
$var wire 7 i func7 [6:0] $end
$var wire 7 j opcode [6:0] $end
$upscope $end
$scope module Immediate_Generator $end
$var wire 25 k immediate_region [24:0] $end
$var wire 5 l instruction [4:0] $end
$var reg 32 [ immediate [31:0] $end
$upscope $end
$upscope $end
$scope module Reg_or_Immediate $end
$var wire 1 D sel $end
$var wire 32 B a [31:0] $end
$var wire 32 5 b [31:0] $end
$var reg 32 m out [31:0] $end
$upscope $end
$scope module Immediate_Limiter $end
$var wire 32 C immediate_input [31:0] $end
$var wire 1 A limit $end
$var reg 32 n immediate_output [31:0] $end
$upscope $end
$scope module Data_Memory $end
$var wire 32 ? write_address [31:0] $end
$var wire 1 H write_en $end
$var wire 32 5 write_data [31:0] $end
$var reg 32 o read_data [31:0] $end
$var wire 1 # clk $end
$var wire 2 p write_command [1:0] $end
$var wire 1 $ resetn $end
$var wire 32 ? read_address [31:0] $end
$scope begin Block49_15 $end
$var integer 32 q i $end
$upscope $end
$upscope $end
$scope module Load_Generator $end
$var wire 32 F data_input [31:0] $end
$var wire 3 r control [2:0] $end
$var reg 32 s data_output [31:0] $end
$var wire 1 $ resetn $end
$upscope $end
$scope module Alu_or_Load_or_Pc_plus_four $end
$var wire 32 ? a [31:0] $end
$var wire 32 E b [31:0] $end
$var wire 32 1 c [31:0] $end
$var reg 32 t out [31:0] $end
$var wire 2 K sel [1:0] $end
$upscope $end
$scope module Rs1_data_or_Pc_or_Zero $end
$var wire 32 4 a [31:0] $end
$var wire 32 0 b [31:0] $end
$var wire 32 u c [31:0] $end
$var reg 32 v out [31:0] $end
$var wire 2 M sel [1:0] $end
$upscope $end
$scope module Branch_Comparator $end
$var wire 32 4 rs1 [31:0] $end
$var wire 32 5 rs2 [31:0] $end
$var reg 1 w branch_or_not $end
$var wire 4 x command [3:0] $end
$var wire 1 I branch_possibility $end
$upscope $end
$scope module PC_plus_four_or_Branch $end
$var wire 1 J sel $end
$var wire 32 1 a [31:0] $end
$var wire 32 ? b [31:0] $end
$var reg 32 y out [31:0] $end
$upscope $end
$scope module u_hex0 $end
$var wire 4 z bin [3:0] $end
$var reg 7 & seg [6:0] $end
$upscope $end
$scope module u_hex1 $end
$var wire 4 { bin [3:0] $end
$var reg 7 ' seg [6:0] $end
$upscope $end
$scope module u_hex2 $end
$var wire 4 | bin [3:0] $end
$var reg 7 ( seg [6:0] $end
$upscope $end
$scope module u_hex3 $end
$var wire 4 } bin [3:0] $end
$var reg 7 ) seg [6:0] $end
$upscope $end
$scope module u_hex4 $end
$var wire 4 ~ bin [3:0] $end
$var reg 7 * seg [6:0] $end
$upscope $end
$scope module u_hex5 $end
$var wire 4 !! bin [3:0] $end
$var reg 7 + seg [6:0] $end
$upscope $end
$scope module u_hex6 $end
$var wire 4 "! bin [3:0] $end
$var reg 7 , seg [6:0] $end
$upscope $end
$scope module u_hex7 $end
$var wire 4 #! bin [3:0] $end
$var reg 7 - seg [6:0] $end
$upscope $end
$scope module Output_Select $end
$var wire 1 % sel $end
$var wire 32 ? a [31:0] $end
$var wire 32 6 b [31:0] $end
$var reg 32 $! out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
bx !!
0"
bx "!
0#
bx #!
0$
bx $!
z%
bx &
bx '
bx (
b1000000 )
bx *
bx +
bx ,
bx -
bx .
b0 /
bx 0
b0 1
bx 2
bz 3
bx 4
bx 5
bx 6
bx 7
bx 8
bx 9
0:
bz ;
bz <
bz =
bx >
b0 ?
bx @
0A
bx B
bx C
xD
b0 E
b11110000000011111000000110101010 F
bz G
xH
xI
0J
bx K
bx L
bx M
bx N
bx O
b100 P
b0 Q
bx R
bx S
bx T
b0 U
0V
bx W
bx X
bx Y
bx Z
bx [
0\
x]
x^
x_
bx `
bx a
bx b
bx c
bx d
bx e
bx f
bx g
bx h
bx i
bx j
bx k
bx l
bx m
bx n
b11110000000011111000000110101010 o
bx p
bx q
bx r
b0 s
bx t
b0 u
bx v
0w
bx x
b0 y
bx z
bx {
bx |
b0 }
bx ~
$end
#5000
1!
1#
b0 0
b0 2
b0 4
b0 5
b0 7
b0 8
b0 9
b0 @
b0 B
b0 C
b11110000000011111000000110101010 F
b0 N
b0 O
b0 R
b0 S
0V
b0 X
b0 Y
b0 Z
b0 [
0\
b0 b
b0 c
b0 d
b0 e
b0 f
b0 g
b0 h
b0 i
b0 j
b0 k
b0 l
b0 m
b0 n
b11110000000011111000000110101010 o
b0 p
b1000000 q
b0 r
b0 x
#10000
0!
b0 !!
1"
b0 "!
0#
b0 #!
1$
b0 $!
b1000000 &
b1000000 '
b1000000 (
b1000000 *
b1000000 +
b1000000 ,
b1000000 -
b0 .
b100 /
b100 1
b0 6
b0 >
b0 ?
0D
b11111111111111111111111110101010 E
0H
0I
b0 K
b0 L
b0 M
b100 Q
b0 U
0V
b0 W
0\
0]
0^
0_
b0 `
b0 a
b11111111111111111111111110101010 s
b0 t
b0 v
b100 y
b0 z
b0 {
b0 |
b0 }
b0 ~
#15000
1!
1#
b1000 /
b100 0
b1000 1
b100 N
b1000 Q
b0 t
b0 v
b1000 y
#20000
0!
0#
#25000
1!
b0 !!
b0 "!
1#
b0 #!
b1111 $!
b1110 &
b1111 .
b1100 /
b1000 0
b1100 1
b111100000000000010010011 2
b1111 6
b1111 8
b1 9
1:
b1111 ?
b1111 @
b1111 B
b1111 C
b0 E
b0 F
b1000 N
b111100000000000010010011 O
b1100 Q
b0 R
b0 S
b1111 U
1V
b0 W
b1111 Y
b1 Z
b1111 [
0\
0]
0^
0_
b0 `
b0 a
b10011 d
b1111 f
b1 g
b10011 j
b11110000000000001 k
b100 l
b1111 m
b1111 n
b0 o
b0 p
b0 r
b0 s
b1111 t
b0 v
b0 x
b1100 y
b1111 z
b0 {
b0 |
b0 }
b0 ~
#30000
0!
0#
#35000
1!
b0 !!
b0 "!
1#
b0 #!
b110101 $!
b10010 &
b110000 '
b110101 .
b10000 /
b1100 0
b10000 1
b11101000001100000100010011 2
b1111 4
b110101 6
b1 7
b11010 8
b10 9
b10 >
b110101 ?
b111010 @
b111010 B
b111010 C
b0 E
b0 F
b1111 L
b1100 N
b11101000001100000100010011 O
b10000 Q
b1111 R
b0 S
b110101 U
1V
b10 W
b1 X
b11010 Y
b10 Z
b111010 [
0\
0]
0^
0_
b0 `
b0 a
b100 b
b1 c
b1 e
b11010 f
b10 g
b100 h
b1 i
b1110100000110000010 k
b100 l
b111010 m
b111010 n
b0 o
b0 p
b100 r
b0 s
b110101 t
b1111 v
b100 x
b10000 y
b101 z
b11 {
b0 |
b0 }
b0 ~
#40000
0!
0#
#45000
1!
b0 !!
b0 "!
1#
b0 #!
b0x0x0x0x00xx01x $!
b1111111 &
b1111111 '
b1111111 (
b1000000 *
b1000000 +
b1000000 ,
b1000000 -
b0x0x0x0x00xx01x .
b10100 /
b10000 0
b10100 1
b110000001001000110000011 2
b10101010000010 6
b1100 8
b11 9
b0 >
b11011 ?
b1100 @
b1100 B
b1100 C
b10101010000010 E
b10101010000010 F
b1 K
b10000 N
b110000001001000110000011 O
b10100 Q
b1111 R
b0 S
b11011 U
1V
b0 W
b1100 Y
b11 Z
b1100 [
0\
0]
0^
0_
b0 `
b1 a
b1 b
b0 c
b11 d
b1100 f
b11 g
b1 h
b0 i
b11 j
b11000000100100011 k
b0 l
b1100 m
b1100 n
b10101010000010 o
b1 p
b1 r
b10101010000010 s
b10101010000010 t
b1111 v
b1 x
b10100 y
bx01x z
bx00x {
bx0x0 |
b0 }
b0 ~
#50000
0!
0#
#55000
1!
b0 !!
b0 "!
1#
b0 #!
b0 $!
b1000000 &
b1000000 '
b1000000 (
b0 .
b11000 /
b10100 0
b11000 1
b100011010001000110011 2
b10101010000010 4
b1111 5
b0 6
b11 7
b1 8
b100 9
b111 >
b0 ?
b1111 @
b0 B
b0 C
1D
b11110000000011111000000110101010 E
b11110000000011111000000110101010 F
b0 K
b10101010000010 L
b10100 N
b100011010001000110011 O
b11000 Q
b10101010000010 R
b1111 S
b0 U
1V
b111 W
b11 X
b1 Y
b100 Z
b0 [
0\
0]
1^
0_
b0 `
b0 a
b10 b
b110011 d
b11 e
b1 f
b100 g
b10 h
b110011 j
b10001101000100 k
b1100 l
b1111 m
b0 n
b11110000000011111000000110101010 o
b10 p
b10 r
b11110000000011111000000110101010 s
b0 t
b10101010000010 v
b10 x
b11000 y
b0 z
b0 {
b0 |
b0 }
b0 ~
#60000
0!
0#
#65000
1!
b0 !!
b0 "!
1#
b0 #!
b101010100000100 $!
b11001 &
b1000000 '
b10010 (
b10010 )
b1000000 *
b1000000 +
b1000000 ,
b1000000 -
b101010100000100 .
b11100 /
b11000 0
b11100 1
b100011001001010010011 2
b101010100000100 6
b101 9
b101 >
b101010100000100 ?
b1 @
1A
b1 B
b1 C
0D
bx E
bx F
b11000 N
b100011001001010010011 O
b11100 Q
b101010100000100 U
1V
b101 W
b101 Z
b1 [
1\
0]
0^
0_
b0 `
b0 a
b1 b
b10011 d
b101 g
b1 h
b10011 j
b10001100100101 k
b100 l
b1 m
b1 n
bx o
b1 p
b1 r
bx s
b101010100000100 t
b10101010000010 v
b1 x
b11100 y
b100 z
b0 {
b101 |
b101 }
b0 ~
#70000
0!
0#
#75000
1!
b0 !!
b0 "!
1#
b0 #!
b100011 $!
b110000 &
b100100 '
b1000000 (
b1000000 )
b100011 .
b100000 /
b11100 0
b100000 1
b10100001010101000100011 2
b1111 4
b101010100000100 5
b100011 6
b1 7
b101 8
b10100 9
0:
b0 >
b100011 ?
b10100 @
0A
b10100 B
b10100 C
b0 E
b0 F
1H
b1111 L
b11100 N
b10100001010101000100011 O
b100000 Q
b1111 R
b101010100000100 S
b100011 U
0V
b0 W
b1 X
b101 Y
b10100 Z
b10100 [
0\
1]
0^
0_
b0 `
b0 a
b10 b
b100011 d
b1 e
b101 f
b10100 g
b10 h
b100011 j
b1010000101010100 k
b1000 l
b10100 m
b10100 n
b0 o
b10 p
b10 r
b0 s
b100011 t
b1111 v
b10 x
b100000 y
b11 z
b10 {
b0 |
b0 }
b0 ~
#80000
0!
0#
#85000
1!
b1 !!
b0 "!
1#
b0 #!
b111001100000000000000 $!
b1000000 &
b1000000 '
b1000110 )
b1000110 *
b1111001 +
b111001100000000000000 .
b100100 /
b100000 0
b100100 1
b111001100011000110111 2
b0 4
b1111 5
b111001100000000000000 6
b11001 7
b1 8
b1100 9
1:
b111001100000000000000 ?
b111001100000000000000 @
b111001100000000000000 B
b111001100000000000000 C
b0xxxxxxxx E
bx F
0H
b0 L
b10 M
b100000 N
b111001100011000110111 O
b100100 Q
b0 R
b1111 S
b111001100000000000000 U
1V
b0 W
b11001 X
b1 Y
b1100 Z
b111001100000000000000 [
0\
0]
0^
0_
b10 `
b0 a
b100 b
b110111 d
b11001 e
b1 f
b1100 g
b100 h
b110111 j
b11100110001100 k
b1101 l
b111001100000000000000 m
b111001100000000000000 n
bx o
b0 p
b100 r
b0xxxxxxxx s
b111001100000000000000 t
b0 v
b1100 x
b100100 y
b0 z
b0 {
b0 |
b1100 }
b1100 ~
#90000
0!
0#
#95000
1!
b10 !!
b0 "!
1#
b0 #!
b1000111010000000100100 $!
b11001 &
b100100 '
b1000 )
b110000 *
b100100 +
b1000111010000000100100 .
b101000 /
b100100 0
b101000 1
b1000111010011110010111 2
b110101 5
b1000111010000000100100 6
b111 7
b10 8
b1111 9
b1000111010000000100100 ?
b1000111010000000000000 @
b1000111010000000000000 B
b1000111010000000000000 C
bx E
b100100 L
b1 M
b100100 N
b1000111010011110010111 O
b101000 Q
b0 R
b110101 S
b1000111010000000100100 U
1V
b0 W
b111 X
b10 Y
b1111 Z
b1000111010000000000000 [
0\
0]
0^
0_
b1 `
b0 a
b10 b
b10111 d
b111 e
b10 f
b1111 g
b10 h
b10111 j
b100011101001111 k
b101 l
b1000111010000000000000 m
b1000111010000000000000 n
b10 p
b10 r
bx s
b1000111010000000100100 t
b100100 v
b1010 x
b101000 y
b100 z
b10 {
b0 |
b1010 }
b11 ~
#100000
0!
0#
#105000
1!
bx !!
bx "!
1#
bx #!
bx $!
b1111111 &
b1111111 '
b1111111 (
b1111111 )
b1111111 *
b1111111 +
b1111111 ,
b1111111 -
bx .
b101100 /
b101000 0
b101100 1
bx 2
bx 4
bx 5
bx 6
bx 7
bx 8
bx 9
0:
bx ?
b0 @
b0 B
b0 C
bx L
b0 M
b101000 N
bx O
b101100 Q
bx R
bx S
bx U
0V
b0 W
bx X
bx Y
bx Z
b0 [
0\
0]
0^
0_
b0 `
b0 a
bx b
bx c
bx d
bx e
bx f
bx g
bx h
bx i
bx j
bx k
bx l
b0 m
b0 n
bx p
bx r
bx t
bx v
bx x
b101100 y
bx z
bx {
bx |
bx }
bx ~
#110000
0!
0#
#115000
1!
1#
b110000 /
b101100 0
b110000 1
b101100 N
b110000 Q
bx t
bx v
b110000 y
#120000
0!
0#
#125000
1!
1#
b110100 /
b110000 0
b110100 1
b110000 N
b110100 Q
bx t
bx v
b110100 y
#130000
0!
0#
#135000
1!
1#
b111000 /
b110100 0
b111000 1
b110100 N
b111000 Q
bx t
bx v
b111000 y
#140000
0!
0#
#145000
1!
1#
b111100 /
b111000 0
b111100 1
b111000 N
b111100 Q
bx t
bx v
b111100 y
#150000
0!
0#
